/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.fraunhofer.ipa.kinematics.ide.contentassist.antlr.internal.InternalKinematicsParser;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class KinematicsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(KinematicsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, KinematicsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getJointTypeAccess().getAlternatives(), "rule__JointType__Alternatives");
			builder.put(grammarAccess.getJointAccess().getGroup(), "rule__Joint__Group__0");
			builder.put(grammarAccess.getJointAccess().getGroup_7(), "rule__Joint__Group_7__0");
			builder.put(grammarAccess.getJointAccess().getGroup_10(), "rule__Joint__Group_10__0");
			builder.put(grammarAccess.getJointAccess().getGroup_11(), "rule__Joint__Group_11__0");
			builder.put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
			builder.put(grammarAccess.getPoseAccess().getGroup(), "rule__Pose__Group__0");
			builder.put(grammarAccess.getLimitAccess().getGroup(), "rule__Limit__Group__0");
			builder.put(grammarAccess.getLimitAccess().getGroup_6(), "rule__Limit__Group_6__0");
			builder.put(grammarAccess.getLimitAccess().getGroup_7(), "rule__Limit__Group_7__0");
			builder.put(grammarAccess.getAxisAccess().getGroup(), "rule__Axis__Group__0");
			builder.put(grammarAccess.getJointAccess().getNameAssignment_1(), "rule__Joint__NameAssignment_1");
			builder.put(grammarAccess.getJointAccess().getTypeAssignment_4(), "rule__Joint__TypeAssignment_4");
			builder.put(grammarAccess.getJointAccess().getParentAssignment_6(), "rule__Joint__ParentAssignment_6");
			builder.put(grammarAccess.getJointAccess().getChildAssignment_7_1(), "rule__Joint__ChildAssignment_7_1");
			builder.put(grammarAccess.getJointAccess().getOriginAssignment_9(), "rule__Joint__OriginAssignment_9");
			builder.put(grammarAccess.getJointAccess().getLimitAssignment_10_1(), "rule__Joint__LimitAssignment_10_1");
			builder.put(grammarAccess.getJointAccess().getAxisAssignment_11_1(), "rule__Joint__AxisAssignment_11_1");
			builder.put(grammarAccess.getLinkAccess().getNameAssignment_2(), "rule__Link__NameAssignment_2");
			builder.put(grammarAccess.getPoseAccess().getXAssignment_3(), "rule__Pose__XAssignment_3");
			builder.put(grammarAccess.getPoseAccess().getYAssignment_5(), "rule__Pose__YAssignment_5");
			builder.put(grammarAccess.getPoseAccess().getZAssignment_7(), "rule__Pose__ZAssignment_7");
			builder.put(grammarAccess.getPoseAccess().getRollAssignment_9(), "rule__Pose__RollAssignment_9");
			builder.put(grammarAccess.getPoseAccess().getPitchAssignment_11(), "rule__Pose__PitchAssignment_11");
			builder.put(grammarAccess.getPoseAccess().getYawAssignment_13(), "rule__Pose__YawAssignment_13");
			builder.put(grammarAccess.getLimitAccess().getEffortAssignment_3(), "rule__Limit__EffortAssignment_3");
			builder.put(grammarAccess.getLimitAccess().getVelocityAssignment_5(), "rule__Limit__VelocityAssignment_5");
			builder.put(grammarAccess.getLimitAccess().getLowerAssignment_6_1(), "rule__Limit__LowerAssignment_6_1");
			builder.put(grammarAccess.getLimitAccess().getUpperAssignment_7_1(), "rule__Limit__UpperAssignment_7_1");
			builder.put(grammarAccess.getAxisAccess().getXAssignment_3(), "rule__Axis__XAssignment_3");
			builder.put(grammarAccess.getAxisAccess().getYAssignment_5(), "rule__Axis__YAssignment_5");
			builder.put(grammarAccess.getAxisAccess().getZAssignment_7(), "rule__Axis__ZAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private KinematicsGrammarAccess grammarAccess;

	@Override
	protected InternalKinematicsParser createParser() {
		InternalKinematicsParser result = new InternalKinematicsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KinematicsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KinematicsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
