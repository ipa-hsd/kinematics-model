/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;
import java.util.Set;
import kinematics.Axis;
import kinematics.Joint;
import kinematics.KinematicsPackage;
import kinematics.Limit;
import kinematics.Link;
import kinematics.Pose;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class KinematicsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KinematicsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KinematicsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KinematicsPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case KinematicsPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case KinematicsPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case KinematicsPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case KinematicsPackage.POSE:
				sequence_Pose(context, (Pose) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     (x=EDouble y=EDouble z=EDouble)
	 * </pre>
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.AXIS__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.AXIS__X));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.AXIS__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.AXIS__Y));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.AXIS__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.AXIS__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAxisAccess().getXEDoubleParserRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getAxisAccess().getYEDoubleParserRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getAxisAccess().getZEDoubleParserRuleCall_7_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=JointType 
	 *         parent=[Link|EString] 
	 *         child=[Link|EString]? 
	 *         origin=Pose 
	 *         limit=Limit? 
	 *         axis=Axis?
	 *     )
	 * </pre>
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (effort=EDouble velocity=EDouble lower=EDouble? upper=EDouble?)
	 * </pre>
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.LINK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pose returns Pose
	 *
	 * Constraint:
	 *     (
	 *         x=EDouble 
	 *         y=EDouble 
	 *         z=EDouble 
	 *         roll=EDouble 
	 *         pitch=EDouble 
	 *         yaw=EDouble
	 *     )
	 * </pre>
	 */
	protected void sequence_Pose(ISerializationContext context, Pose semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__X));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__Y));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__Z));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__ROLL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__ROLL));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__PITCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__PITCH));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.POSE__YAW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.POSE__YAW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPoseAccess().getXEDoubleParserRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPoseAccess().getYEDoubleParserRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getPoseAccess().getZEDoubleParserRuleCall_7_0(), semanticObject.getZ());
		feeder.accept(grammarAccess.getPoseAccess().getRollEDoubleParserRuleCall_9_0(), semanticObject.getRoll());
		feeder.accept(grammarAccess.getPoseAccess().getPitchEDoubleParserRuleCall_11_0(), semanticObject.getPitch());
		feeder.accept(grammarAccess.getPoseAccess().getYawEDoubleParserRuleCall_13_0(), semanticObject.getYaw());
		feeder.finish();
	}
	
	
}
