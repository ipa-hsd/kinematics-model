/*
 * generated by Xtext 2.26.0
 */
grammar InternalKinematics;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.fraunhofer.ipa.kinematics.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fraunhofer.ipa.kinematics.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;

}

@parser::members {

 	private KinematicsGrammarAccess grammarAccess;

    public InternalKinematicsParser(TokenStream input, KinematicsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Joint";
   	}

   	@Override
   	protected KinematicsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleJoint
entryRuleJoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJointRule()); }
	iv_ruleJoint=ruleJoint
	{ $current=$iv_ruleJoint.current; }
	EOF;

// Rule Joint
ruleJoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Joint'
		{
			newLeafNode(otherlv_0, grammarAccess.getJointAccess().getJointKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJointAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJointRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getJointAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getJointAccess().getTypeKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_4_0());
				}
				lv_type_4_0=ruleJointType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJointRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.JointType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='parent'
		{
			newLeafNode(otherlv_5, grammarAccess.getJointAccess().getParentKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJointRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getJointAccess().getParentLinkCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='child'
			{
				newLeafNode(otherlv_7, grammarAccess.getJointAccess().getChildKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJointRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getJointAccess().getChildLinkCrossReference_7_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='origin'
		{
			newLeafNode(otherlv_9, grammarAccess.getJointAccess().getOriginKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJointAccess().getOriginPoseParserRuleCall_9_0());
				}
				lv_origin_10_0=rulePose
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJointRule());
					}
					set(
						$current,
						"origin",
						lv_origin_10_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Pose");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11='limit'
			{
				newLeafNode(otherlv_11, grammarAccess.getJointAccess().getLimitKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJointAccess().getLimitLimitParserRuleCall_10_1_0());
					}
					lv_limit_12_0=ruleLimit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJointRule());
						}
						set(
							$current,
							"limit",
							lv_limit_12_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Limit");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13='axis'
			{
				newLeafNode(otherlv_13, grammarAccess.getJointAccess().getAxisKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJointAccess().getAxisAxisParserRuleCall_11_1_0());
					}
					lv_axis_14_0=ruleAxis
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJointRule());
						}
						set(
							$current,
							"axis",
							lv_axis_14_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Axis");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getJointAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRulePose
entryRulePose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPoseRule()); }
	iv_rulePose=rulePose
	{ $current=$iv_rulePose.current; }
	EOF;

// Rule Pose
rulePose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Pose'
		{
			newLeafNode(otherlv_0, grammarAccess.getPoseAccess().getPoseKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPoseAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='x'
		{
			newLeafNode(otherlv_2, grammarAccess.getPoseAccess().getXKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getXEDoubleParserRuleCall_3_0());
				}
				lv_x_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"x",
						lv_x_3_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='y'
		{
			newLeafNode(otherlv_4, grammarAccess.getPoseAccess().getYKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getYEDoubleParserRuleCall_5_0());
				}
				lv_y_5_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"y",
						lv_y_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='z'
		{
			newLeafNode(otherlv_6, grammarAccess.getPoseAccess().getZKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getZEDoubleParserRuleCall_7_0());
				}
				lv_z_7_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"z",
						lv_z_7_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='roll'
		{
			newLeafNode(otherlv_8, grammarAccess.getPoseAccess().getRollKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getRollEDoubleParserRuleCall_9_0());
				}
				lv_roll_9_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"roll",
						lv_roll_9_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='pitch'
		{
			newLeafNode(otherlv_10, grammarAccess.getPoseAccess().getPitchKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getPitchEDoubleParserRuleCall_11_0());
				}
				lv_pitch_11_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"pitch",
						lv_pitch_11_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='yaw'
		{
			newLeafNode(otherlv_12, grammarAccess.getPoseAccess().getYawKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPoseAccess().getYawEDoubleParserRuleCall_13_0());
				}
				lv_yaw_13_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPoseRule());
					}
					set(
						$current,
						"yaw",
						lv_yaw_13_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getPoseAccess().getRightCurlyBracketKeyword_14());
		}
	)
;

// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLimitRule()); }
	iv_ruleLimit=ruleLimit
	{ $current=$iv_ruleLimit.current; }
	EOF;

// Rule Limit
ruleLimit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Limit'
		{
			newLeafNode(otherlv_0, grammarAccess.getLimitAccess().getLimitKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getLimitAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='effort'
		{
			newLeafNode(otherlv_2, grammarAccess.getLimitAccess().getEffortKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLimitAccess().getEffortEDoubleParserRuleCall_3_0());
				}
				lv_effort_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLimitRule());
					}
					set(
						$current,
						"effort",
						lv_effort_3_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='velocity'
		{
			newLeafNode(otherlv_4, grammarAccess.getLimitAccess().getVelocityKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLimitAccess().getVelocityEDoubleParserRuleCall_5_0());
				}
				lv_velocity_5_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLimitRule());
					}
					set(
						$current,
						"velocity",
						lv_velocity_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='lower'
			{
				newLeafNode(otherlv_6, grammarAccess.getLimitAccess().getLowerKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getLowerEDoubleParserRuleCall_6_1_0());
					}
					lv_lower_7_0=ruleEDouble
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"lower",
							lv_lower_7_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='upper'
			{
				newLeafNode(otherlv_8, grammarAccess.getLimitAccess().getUpperKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getUpperEDoubleParserRuleCall_7_1_0());
					}
					lv_upper_9_0=ruleEDouble
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"upper",
							lv_upper_9_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getLimitAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleAxis
entryRuleAxis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAxisRule()); }
	iv_ruleAxis=ruleAxis
	{ $current=$iv_ruleAxis.current; }
	EOF;

// Rule Axis
ruleAxis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Axis'
		{
			newLeafNode(otherlv_0, grammarAccess.getAxisAccess().getAxisKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAxisAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='x'
		{
			newLeafNode(otherlv_2, grammarAccess.getAxisAccess().getXKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAxisAccess().getXEDoubleParserRuleCall_3_0());
				}
				lv_x_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAxisRule());
					}
					set(
						$current,
						"x",
						lv_x_3_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='y'
		{
			newLeafNode(otherlv_4, grammarAccess.getAxisAccess().getYKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAxisAccess().getYEDoubleParserRuleCall_5_0());
				}
				lv_y_5_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAxisRule());
					}
					set(
						$current,
						"y",
						lv_y_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='z'
		{
			newLeafNode(otherlv_6, grammarAccess.getAxisAccess().getZKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAxisAccess().getZEDoubleParserRuleCall_7_0());
				}
				lv_z_7_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAxisRule());
					}
					set(
						$current,
						"z",
						lv_z_7_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getAxisAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_DOUBLE_0=RULE_DOUBLE
	{
		$current.merge(this_DOUBLE_0);
	}
	{
		newLeafNode(this_DOUBLE_0, grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall());
	}
;

// Rule JointType
ruleJointType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='fixed'
			{
				$current = grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='prismatic'
			{
				$current = grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='revolute'
			{
				$current = grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_2());
			}
		)
	)
;

fragment RULE_DIGIT : '0'..'9';

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_DECINT ('.' RULE_DIGIT*|('.' RULE_DIGIT*)? ('E'|'e') ('-'|'+')? RULE_DECINT);

RULE_DECINT : ('0'|'1'..'9' RULE_DIGIT*|'-' '0'..'9' RULE_DIGIT*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
