/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KinematicsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeJointTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cParentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cParentLinkCrossReference_6_0 = (CrossReference)cParentAssignment_6.eContents().get(0);
		private final RuleCall cParentLinkEStringParserRuleCall_6_0_1 = (RuleCall)cParentLinkCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cChildKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cChildAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cChildLinkCrossReference_7_1_0 = (CrossReference)cChildAssignment_7_1.eContents().get(0);
		private final RuleCall cChildLinkEStringParserRuleCall_7_1_0_1 = (RuleCall)cChildLinkCrossReference_7_1_0.eContents().get(1);
		private final Keyword cOriginKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOriginAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOriginPoseParserRuleCall_9_0 = (RuleCall)cOriginAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLimitKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cLimitAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_10_1_0 = (RuleCall)cLimitAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAxisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAxisAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_11_1_0 = (RuleCall)cAxisAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Joint returns Joint:
		//    'Joint'
		//    name=EString
		//    '{'
		//        'type' type=JointType
		//        'parent' parent=[Link|EString]
		//        ('child' child=[Link|EString])?
		//        'origin' origin=Pose
		//        ('limit' limit=Limit)?
		//        ('axis' axis=Axis)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint'
		//name=EString
		//'{'
		//    'type' type=JointType
		//    'parent' parent=[Link|EString]
		//    ('child' child=[Link|EString])?
		//    'origin' origin=Pose
		//    ('limit' limit=Limit)?
		//    ('axis' axis=Axis)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=JointType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_4_0() { return cTypeJointTypeEnumRuleCall_4_0; }
		
		//'parent'
		public Keyword getParentKeyword_5() { return cParentKeyword_5; }
		
		//parent=[Link|EString]
		public Assignment getParentAssignment_6() { return cParentAssignment_6; }
		
		//[Link|EString]
		public CrossReference getParentLinkCrossReference_6_0() { return cParentLinkCrossReference_6_0; }
		
		//EString
		public RuleCall getParentLinkEStringParserRuleCall_6_0_1() { return cParentLinkEStringParserRuleCall_6_0_1; }
		
		//('child' child=[Link|EString])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'child'
		public Keyword getChildKeyword_7_0() { return cChildKeyword_7_0; }
		
		//child=[Link|EString]
		public Assignment getChildAssignment_7_1() { return cChildAssignment_7_1; }
		
		//[Link|EString]
		public CrossReference getChildLinkCrossReference_7_1_0() { return cChildLinkCrossReference_7_1_0; }
		
		//EString
		public RuleCall getChildLinkEStringParserRuleCall_7_1_0_1() { return cChildLinkEStringParserRuleCall_7_1_0_1; }
		
		//'origin'
		public Keyword getOriginKeyword_8() { return cOriginKeyword_8; }
		
		//origin=Pose
		public Assignment getOriginAssignment_9() { return cOriginAssignment_9; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_9_0() { return cOriginPoseParserRuleCall_9_0; }
		
		//('limit' limit=Limit)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'limit'
		public Keyword getLimitKeyword_10_0() { return cLimitKeyword_10_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_10_1() { return cLimitAssignment_10_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_10_1_0() { return cLimitLimitParserRuleCall_10_1_0; }
		
		//('axis' axis=Axis)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'axis'
		public Keyword getAxisKeyword_11_0() { return cAxisKeyword_11_0; }
		
		//axis=Axis
		public Assignment getAxisAssignment_11_1() { return cAxisAssignment_11_1; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_11_1_0() { return cAxisAxisParserRuleCall_11_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Link returns Link:
		//    {Link}
		//    'Link'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Link}
		//'Link'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Link}
		public Action getLinkAction_0() { return cLinkAction_0; }
		
		//'Link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class PoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Pose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPoseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXEDoubleParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYEDoubleParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cZKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZEDoubleParserRuleCall_7_0 = (RuleCall)cZAssignment_7.eContents().get(0);
		private final Keyword cRollKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRollAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRollEDoubleParserRuleCall_9_0 = (RuleCall)cRollAssignment_9.eContents().get(0);
		private final Keyword cPitchKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPitchAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPitchEDoubleParserRuleCall_11_0 = (RuleCall)cPitchAssignment_11.eContents().get(0);
		private final Keyword cYawKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cYawAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cYawEDoubleParserRuleCall_13_0 = (RuleCall)cYawAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Pose returns Pose:
		//    'Pose'
		//    '{'
		//        'x' x=EDouble
		//        'y' y=EDouble
		//        'z' z=EDouble
		//        'roll' roll=EDouble
		//        'pitch' pitch=EDouble
		//        'yaw' yaw=EDouble
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pose'
		//'{'
		//    'x' x=EDouble
		//    'y' y=EDouble
		//    'z' z=EDouble
		//    'roll' roll=EDouble
		//    'pitch' pitch=EDouble
		//    'yaw' yaw=EDouble
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Pose'
		public Keyword getPoseKeyword_0() { return cPoseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=EDouble
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//EDouble
		public RuleCall getXEDoubleParserRuleCall_3_0() { return cXEDoubleParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=EDouble
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//EDouble
		public RuleCall getYEDoubleParserRuleCall_5_0() { return cYEDoubleParserRuleCall_5_0; }
		
		//'z'
		public Keyword getZKeyword_6() { return cZKeyword_6; }
		
		//z=EDouble
		public Assignment getZAssignment_7() { return cZAssignment_7; }
		
		//EDouble
		public RuleCall getZEDoubleParserRuleCall_7_0() { return cZEDoubleParserRuleCall_7_0; }
		
		//'roll'
		public Keyword getRollKeyword_8() { return cRollKeyword_8; }
		
		//roll=EDouble
		public Assignment getRollAssignment_9() { return cRollAssignment_9; }
		
		//EDouble
		public RuleCall getRollEDoubleParserRuleCall_9_0() { return cRollEDoubleParserRuleCall_9_0; }
		
		//'pitch'
		public Keyword getPitchKeyword_10() { return cPitchKeyword_10; }
		
		//pitch=EDouble
		public Assignment getPitchAssignment_11() { return cPitchAssignment_11; }
		
		//EDouble
		public RuleCall getPitchEDoubleParserRuleCall_11_0() { return cPitchEDoubleParserRuleCall_11_0; }
		
		//'yaw'
		public Keyword getYawKeyword_12() { return cYawKeyword_12; }
		
		//yaw=EDouble
		public Assignment getYawAssignment_13() { return cYawAssignment_13; }
		
		//EDouble
		public RuleCall getYawEDoubleParserRuleCall_13_0() { return cYawEDoubleParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLimitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEffortKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffortEDoubleParserRuleCall_3_0 = (RuleCall)cEffortAssignment_3.eContents().get(0);
		private final Keyword cVelocityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cVelocityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVelocityEDoubleParserRuleCall_5_0 = (RuleCall)cVelocityAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLowerKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLowerAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLowerEDoubleParserRuleCall_6_1_0 = (RuleCall)cLowerAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUpperKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUpperAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUpperEDoubleParserRuleCall_7_1_0 = (RuleCall)cUpperAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Limit returns Limit:
		//    'Limit'
		//    '{'
		//        'effort' effort=EDouble
		//        'velocity' velocity=EDouble
		//        ('lower' lower=EDouble)?
		//        ('upper' upper=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Limit'
		//'{'
		//    'effort' effort=EDouble
		//    'velocity' velocity=EDouble
		//    ('lower' lower=EDouble)?
		//    ('upper' upper=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Limit'
		public Keyword getLimitKeyword_0() { return cLimitKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'effort'
		public Keyword getEffortKeyword_2() { return cEffortKeyword_2; }
		
		//effort=EDouble
		public Assignment getEffortAssignment_3() { return cEffortAssignment_3; }
		
		//EDouble
		public RuleCall getEffortEDoubleParserRuleCall_3_0() { return cEffortEDoubleParserRuleCall_3_0; }
		
		//'velocity'
		public Keyword getVelocityKeyword_4() { return cVelocityKeyword_4; }
		
		//velocity=EDouble
		public Assignment getVelocityAssignment_5() { return cVelocityAssignment_5; }
		
		//EDouble
		public RuleCall getVelocityEDoubleParserRuleCall_5_0() { return cVelocityEDoubleParserRuleCall_5_0; }
		
		//('lower' lower=EDouble)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'lower'
		public Keyword getLowerKeyword_6_0() { return cLowerKeyword_6_0; }
		
		//lower=EDouble
		public Assignment getLowerAssignment_6_1() { return cLowerAssignment_6_1; }
		
		//EDouble
		public RuleCall getLowerEDoubleParserRuleCall_6_1_0() { return cLowerEDoubleParserRuleCall_6_1_0; }
		
		//('upper' upper=EDouble)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'upper'
		public Keyword getUpperKeyword_7_0() { return cUpperKeyword_7_0; }
		
		//upper=EDouble
		public Assignment getUpperAssignment_7_1() { return cUpperAssignment_7_1; }
		
		//EDouble
		public RuleCall getUpperEDoubleParserRuleCall_7_1_0() { return cUpperEDoubleParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAxisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXEDoubleParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYEDoubleParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cZKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZEDoubleParserRuleCall_7_0 = (RuleCall)cZAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Axis returns Axis:
		//    'Axis'
		//    '{'
		//        'x' x=EDouble
		//        'y' y=EDouble
		//        'z' z=EDouble
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Axis'
		//'{'
		//    'x' x=EDouble
		//    'y' y=EDouble
		//    'z' z=EDouble
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Axis'
		public Keyword getAxisKeyword_0() { return cAxisKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=EDouble
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//EDouble
		public RuleCall getXEDoubleParserRuleCall_3_0() { return cXEDoubleParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=EDouble
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//EDouble
		public RuleCall getYEDoubleParserRuleCall_5_0() { return cYEDoubleParserRuleCall_5_0; }
		
		//'z'
		public Keyword getZKeyword_6() { return cZKeyword_6; }
		
		//z=EDouble
		public Assignment getZAssignment_7() { return cZAssignment_7; }
		
		//EDouble
		public RuleCall getZEDoubleParserRuleCall_7_0() { return cZEDoubleParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		//AnyURI returns type::AnyURI:
		//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'AnyURI'
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.EDouble");
		private final RuleCall cDOUBLETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EDouble returns type::Double:
		//    DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall() { return cDOUBLETerminalRuleCall; }
	}
	public class Integer0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Integer0");
		private final RuleCall cDECINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer0 returns type::Int:
		//    DECINT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECINT
		public RuleCall getDECINTTerminalRuleCall() { return cDECINTTerminalRuleCall; }
	}
	
	public class JointTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFixedFixedKeyword_0_0 = (Keyword)cFixedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrismaticPrismaticKeyword_1_0 = (Keyword)cPrismaticEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRevoluteRevoluteKeyword_2_0 = (Keyword)cRevoluteEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum JointType returns JointType:
		//                fixed = 'fixed' | prismatic = 'prismatic' | revolute = 'revolute';
		public EnumRule getRule() { return rule; }
		
		//fixed = 'fixed' | prismatic = 'prismatic' | revolute = 'revolute'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixed = 'fixed'
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_0() { return cFixedEnumLiteralDeclaration_0; }
		
		//'fixed'
		public Keyword getFixedFixedKeyword_0_0() { return cFixedFixedKeyword_0_0; }
		
		//prismatic = 'prismatic'
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_1() { return cPrismaticEnumLiteralDeclaration_1; }
		
		//'prismatic'
		public Keyword getPrismaticPrismaticKeyword_1_0() { return cPrismaticPrismaticKeyword_1_0; }
		
		//revolute = 'revolute'
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_2() { return cRevoluteEnumLiteralDeclaration_2; }
		
		//'revolute'
		public Keyword getRevoluteRevoluteKeyword_2_0() { return cRevoluteRevoluteKeyword_2_0; }
	}
	
	private final JointElements pJoint;
	private final LinkElements pLink;
	private final PoseElements pPose;
	private final JointTypeElements eJointType;
	private final LimitElements pLimit;
	private final AxisElements pAxis;
	private final AnyURIElements pAnyURI;
	private final EStringElements pEString;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECINT;
	private final EDoubleElements pEDouble;
	private final Integer0Elements pInteger0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KinematicsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJoint = new JointElements();
		this.pLink = new LinkElements();
		this.pPose = new PoseElements();
		this.eJointType = new JointTypeElements();
		this.pLimit = new LimitElements();
		this.pAxis = new AxisElements();
		this.pAnyURI = new AnyURIElements();
		this.pEString = new EStringElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DIGIT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DOUBLE");
		this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DECINT");
		this.pEDouble = new EDoubleElements();
		this.pInteger0 = new Integer0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.kinematics.Kinematics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Joint returns Joint:
	//    'Joint'
	//    name=EString
	//    '{'
	//        'type' type=JointType
	//        'parent' parent=[Link|EString]
	//        ('child' child=[Link|EString])?
	//        'origin' origin=Pose
	//        ('limit' limit=Limit)?
	//        ('axis' axis=Axis)?
	//    '}';
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Link returns Link:
	//    {Link}
	//    'Link'
	//    name=EString;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Pose returns Pose:
	//    'Pose'
	//    '{'
	//        'x' x=EDouble
	//        'y' y=EDouble
	//        'z' z=EDouble
	//        'roll' roll=EDouble
	//        'pitch' pitch=EDouble
	//        'yaw' yaw=EDouble
	//    '}';
	public PoseElements getPoseAccess() {
		return pPose;
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//enum JointType returns JointType:
	//                fixed = 'fixed' | prismatic = 'prismatic' | revolute = 'revolute';
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//Limit returns Limit:
	//    'Limit'
	//    '{'
	//        'effort' effort=EDouble
	//        'velocity' velocity=EDouble
	//        ('lower' lower=EDouble)?
	//        ('upper' upper=EDouble)?
	//    '}';
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Axis returns Axis:
	//    'Axis'
	//    '{'
	//        'x' x=EDouble
	//        'y' y=EDouble
	//        'z' z=EDouble
	//    '}';
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//AnyURI returns type::AnyURI:
	//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	public AnyURIElements getAnyURIAccess() {
		return pAnyURI;
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return tDECINT;
	}
	
	//EDouble returns type::Double:
	//    DOUBLE;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public Integer0Elements getInteger0Access() {
		return pInteger0;
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
