/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.composition.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CompositionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLinksKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cLinksAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cLinksLinkParserRuleCall_5_2_0 = (RuleCall)cLinksAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cLinksAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cLinksLinkParserRuleCall_5_3_1_0 = (RuleCall)cLinksAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cJointsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cJointsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cJointsJointParserRuleCall_6_2_0 = (RuleCall)cJointsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cJointsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cJointsJointParserRuleCall_6_3_1_0 = (RuleCall)cJointsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cComponentsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cComponentsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cComponentsComponentInstanceParserRuleCall_7_2_0 = (RuleCall)cComponentsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cComponentsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cComponentsComponentInstanceParserRuleCall_7_3_1_0 = (RuleCall)cComponentsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Component returns Component:
		//    'Component'
		//    '{'
		//        'name' name=EString
		//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//        ('links' '{' links+=Link ( "," links+=Link)* '}' )?
		//        ('joints' '{' joints+=Joint ( "," joints+=Joint)* '}' )?
		//        ('components' '(' components+=ComponentInstance ( "," components+=ComponentInstance)* ')' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component'
		//'{'
		//    'name' name=EString
		//    ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		//    ('links' '{' links+=Link ( "," links+=Link)* '}' )?
		//    ('joints' '{' joints+=Joint ( "," joints+=Joint)* '}' )?
		//    ('components' '(' components+=ComponentInstance ( "," components+=ComponentInstance)* ')' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_2_0() { return cParametersParameterParserRuleCall_4_2_0; }
		
		//( "," parameters+=Parameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_3_1_0() { return cParametersParameterParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('links' '{' links+=Link ( "," links+=Link)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'links'
		public Keyword getLinksKeyword_5_0() { return cLinksKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//links+=Link
		public Assignment getLinksAssignment_5_2() { return cLinksAssignment_5_2; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_5_2_0() { return cLinksLinkParserRuleCall_5_2_0; }
		
		//( "," links+=Link)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//links+=Link
		public Assignment getLinksAssignment_5_3_1() { return cLinksAssignment_5_3_1; }
		
		//Link
		public RuleCall getLinksLinkParserRuleCall_5_3_1_0() { return cLinksLinkParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('joints' '{' joints+=Joint ( "," joints+=Joint)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'joints'
		public Keyword getJointsKeyword_6_0() { return cJointsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//joints+=Joint
		public Assignment getJointsAssignment_6_2() { return cJointsAssignment_6_2; }
		
		//Joint
		public RuleCall getJointsJointParserRuleCall_6_2_0() { return cJointsJointParserRuleCall_6_2_0; }
		
		//( "," joints+=Joint)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//joints+=Joint
		public Assignment getJointsAssignment_6_3_1() { return cJointsAssignment_6_3_1; }
		
		//Joint
		public RuleCall getJointsJointParserRuleCall_6_3_1_0() { return cJointsJointParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('components' '(' components+=ComponentInstance ( "," components+=ComponentInstance)* ')' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'components'
		public Keyword getComponentsKeyword_7_0() { return cComponentsKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//components+=ComponentInstance
		public Assignment getComponentsAssignment_7_2() { return cComponentsAssignment_7_2; }
		
		//ComponentInstance
		public RuleCall getComponentsComponentInstanceParserRuleCall_7_2_0() { return cComponentsComponentInstanceParserRuleCall_7_2_0; }
		
		//( "," components+=ComponentInstance)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//components+=ComponentInstance
		public Assignment getComponentsAssignment_7_3_1() { return cComponentsAssignment_7_3_1; }
		
		//ComponentInstance
		public RuleCall getComponentsComponentInstanceParserRuleCall_7_3_1_0() { return cComponentsComponentInstanceParserRuleCall_7_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeComponentCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeComponentEStringParserRuleCall_3_0_1 = (RuleCall)cTypeComponentCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterInstanceParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterInstanceParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentInstance returns ComponentInstance:
		//    'ComponentInstance'
		//    '{'
		//        'type' type=[Component|EString]
		//        ('parameters' '(' parameters+=ParameterInstance ( "," parameters+=ParameterInstance)* ')' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ComponentInstance'
		//'{'
		//    'type' type=[Component|EString]
		//    ('parameters' '(' parameters+=ParameterInstance ( "," parameters+=ParameterInstance)* ')' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ComponentInstance'
		public Keyword getComponentInstanceKeyword_0() { return cComponentInstanceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=[Component|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Component|EString]
		public CrossReference getTypeComponentCrossReference_3_0() { return cTypeComponentCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeComponentEStringParserRuleCall_3_0_1() { return cTypeComponentEStringParserRuleCall_3_0_1; }
		
		//('parameters' '(' parameters+=ParameterInstance ( "," parameters+=ParameterInstance)* ')' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//parameters+=ParameterInstance
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }
		
		//ParameterInstance
		public RuleCall getParametersParameterInstanceParserRuleCall_4_2_0() { return cParametersParameterInstanceParserRuleCall_4_2_0; }
		
		//( "," parameters+=ParameterInstance)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameters+=ParameterInstance
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }
		
		//ParameterInstance
		public RuleCall getParametersParameterInstanceParserRuleCall_4_3_1_0() { return cParametersParameterInstanceParserRuleCall_4_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterValue_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinkRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterValue returns ParameterValue:
		//    ParameterValue_Impl | LinkRef;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterValue_Impl | LinkRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterValue_Impl
		public RuleCall getParameterValue_ImplParserRuleCall_0() { return cParameterValue_ImplParserRuleCall_0; }
		
		//LinkRef
		public RuleCall getLinkRefParserRuleCall_1() { return cLinkRefParserRuleCall_1; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterPoseTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParameterLinkRefTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ParameterType returns ParameterType:
		//    ParameterType_Impl | ParameterPoseType | ParameterStringType | ParameterLinkRefType;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterType_Impl | ParameterPoseType | ParameterStringType | ParameterLinkRefType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterType_Impl
		public RuleCall getParameterType_ImplParserRuleCall_0() { return cParameterType_ImplParserRuleCall_0; }
		
		//ParameterPoseType
		public RuleCall getParameterPoseTypeParserRuleCall_1() { return cParameterPoseTypeParserRuleCall_1; }
		
		//ParameterStringType
		public RuleCall getParameterStringTypeParserRuleCall_2() { return cParameterStringTypeParserRuleCall_2; }
		
		//ParameterLinkRefType
		public RuleCall getParameterLinkRefTypeParserRuleCall_3() { return cParameterLinkRefTypeParserRuleCall_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeParameterTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueParameterValueParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Parameter returns Parameter:
		//    'Parameter'
		//    name=EString
		//    '{'
		//        'type' type=ParameterType
		//        ('value' value=ParameterValue)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameter'
		//name=EString
		//'{'
		//    'type' type=ParameterType
		//    ('value' value=ParameterValue)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_4_0() { return cTypeParameterTypeParserRuleCall_4_0; }
		
		//('value' value=ParameterValue)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'value'
		public Keyword getValueKeyword_5_0() { return cValueKeyword_5_0; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_5_1_0() { return cValueParameterValueParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterValue_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterValue_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ParameterValue_Impl returns ParameterValue:
		//    {ParameterValue}
		//    'ParameterValue'
		//    '{'
		//        ('value' value=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterValue}
		//'ParameterValue'
		//'{'
		//    ('value' value=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ParameterValue}
		public Action getParameterValueAction_0() { return cParameterValueAction_0; }
		
		//'ParameterValue'
		public Keyword getParameterValueKeyword_1() { return cParameterValueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EString
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_1_0() { return cValueEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ParameterType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterType_Impl returns ParameterType:
		//    {ParameterType}
		//    'ParameterType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterType}
		//'ParameterType'
		public Group getGroup() { return cGroup; }
		
		//{ParameterType}
		public Action getParameterTypeAction_0() { return cParameterTypeAction_0; }
		
		//'ParameterType'
		public Keyword getParameterTypeKeyword_1() { return cParameterTypeKeyword_1; }
	}
	public class LinkRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.LinkRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefLinkCrossReference_4_1_0 = (CrossReference)cRefAssignment_4_1.eContents().get(0);
		private final RuleCall cRefLinkEStringParserRuleCall_4_1_0_1 = (RuleCall)cRefLinkCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LinkRef returns LinkRef:
		//    {LinkRef}
		//    'LinkRef'
		//    '{'
		//        ('value' value=EString)?
		//        ('ref' ref=[kinematics::Link|EString])?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LinkRef}
		//'LinkRef'
		//'{'
		//    ('value' value=EString)?
		//    ('ref' ref=[kinematics::Link|EString])?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{LinkRef}
		public Action getLinkRefAction_0() { return cLinkRefAction_0; }
		
		//'LinkRef'
		public Keyword getLinkRefKeyword_1() { return cLinkRefKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EString
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_3_1_0() { return cValueEStringParserRuleCall_3_1_0; }
		
		//('ref' ref=[kinematics::Link|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ref'
		public Keyword getRefKeyword_4_0() { return cRefKeyword_4_0; }
		
		//ref=[kinematics::Link|EString]
		public Assignment getRefAssignment_4_1() { return cRefAssignment_4_1; }
		
		//[kinematics::Link|EString]
		public CrossReference getRefLinkCrossReference_4_1_0() { return cRefLinkCrossReference_4_1_0; }
		
		//EString
		public RuleCall getRefLinkEStringParserRuleCall_4_1_0_1() { return cRefLinkEStringParserRuleCall_4_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParameterPoseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterPoseType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterPoseTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterPoseTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterPoseType returns ParameterPoseType:
		//    {ParameterPoseType}
		//    'ParameterPoseType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterPoseType}
		//'ParameterPoseType'
		public Group getGroup() { return cGroup; }
		
		//{ParameterPoseType}
		public Action getParameterPoseTypeAction_0() { return cParameterPoseTypeAction_0; }
		
		//'ParameterPoseType'
		public Keyword getParameterPoseTypeKeyword_1() { return cParameterPoseTypeKeyword_1; }
	}
	public class ParameterStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterStringTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterStringType returns ParameterStringType:
		//    {ParameterStringType}
		//    'ParameterStringType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterStringType}
		//'ParameterStringType'
		public Group getGroup() { return cGroup; }
		
		//{ParameterStringType}
		public Action getParameterStringTypeAction_0() { return cParameterStringTypeAction_0; }
		
		//'ParameterStringType'
		public Keyword getParameterStringTypeKeyword_1() { return cParameterStringTypeKeyword_1; }
	}
	public class ParameterLinkRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterLinkRefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterLinkRefTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterLinkRefTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterLinkRefType returns ParameterLinkRefType:
		//    {ParameterLinkRefType}
		//    'ParameterLinkRefType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterLinkRefType}
		//'ParameterLinkRefType'
		public Group getGroup() { return cGroup; }
		
		//{ParameterLinkRefType}
		public Action getParameterLinkRefTypeAction_0() { return cParameterLinkRefTypeAction_0; }
		
		//'ParameterLinkRefType'
		public Keyword getParameterLinkRefTypeKeyword_1() { return cParameterLinkRefTypeKeyword_1; }
	}
	public class ParameterInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.composition.Composition.ParameterInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParameterKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParameterParameterCrossReference_3_0 = (CrossReference)cParameterAssignment_3.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_3_0_1 = (RuleCall)cParameterParameterCrossReference_3_0.eContents().get(1);
		private final Keyword cValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueParameterValueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ParameterInstance returns ParameterInstance:
		//    'ParameterInstance'
		//    '{'
		//        'parameter' parameter=[Parameter|EString]
		//        'value' value=ParameterValue
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ParameterInstance'
		//'{'
		//    'parameter' parameter=[Parameter|EString]
		//    'value' value=ParameterValue
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ParameterInstance'
		public Keyword getParameterInstanceKeyword_0() { return cParameterInstanceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'parameter'
		public Keyword getParameterKeyword_2() { return cParameterKeyword_2; }
		
		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_3_0() { return cParameterParameterCrossReference_3_0; }
		
		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_3_0_1() { return cParameterParameterEStringParserRuleCall_3_0_1; }
		
		//'value'
		public Keyword getValueKeyword_4() { return cValueKeyword_4; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_5_0() { return cValueParameterValueParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final ComponentElements pComponent;
	private final ComponentInstanceElements pComponentInstance;
	private final ParameterValueElements pParameterValue;
	private final ParameterTypeElements pParameterType;
	private final ParameterElements pParameter;
	private final ParameterValue_ImplElements pParameterValue_Impl;
	private final ParameterType_ImplElements pParameterType_Impl;
	private final LinkRefElements pLinkRef;
	private final ParameterPoseTypeElements pParameterPoseType;
	private final ParameterStringTypeElements pParameterStringType;
	private final ParameterLinkRefTypeElements pParameterLinkRefType;
	private final ParameterInstanceElements pParameterInstance;
	
	private final Grammar grammar;
	
	private final KinematicsGrammarAccess gaKinematics;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CompositionGrammarAccess(GrammarProvider grammarProvider,
			KinematicsGrammarAccess gaKinematics,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKinematics = gaKinematics;
		this.gaTerminals = gaTerminals;
		this.pComponent = new ComponentElements();
		this.pComponentInstance = new ComponentInstanceElements();
		this.pParameterValue = new ParameterValueElements();
		this.pParameterType = new ParameterTypeElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue_Impl = new ParameterValue_ImplElements();
		this.pParameterType_Impl = new ParameterType_ImplElements();
		this.pLinkRef = new LinkRefElements();
		this.pParameterPoseType = new ParameterPoseTypeElements();
		this.pParameterStringType = new ParameterStringTypeElements();
		this.pParameterLinkRefType = new ParameterLinkRefTypeElements();
		this.pParameterInstance = new ParameterInstanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.composition.Composition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KinematicsGrammarAccess getKinematicsGrammarAccess() {
		return gaKinematics;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Component returns Component:
	//    'Component'
	//    '{'
	//        'name' name=EString
	//        ('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	//        ('links' '{' links+=Link ( "," links+=Link)* '}' )?
	//        ('joints' '{' joints+=Joint ( "," joints+=Joint)* '}' )?
	//        ('components' '(' components+=ComponentInstance ( "," components+=ComponentInstance)* ')' )?
	//    '}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//ComponentInstance returns ComponentInstance:
	//    'ComponentInstance'
	//    '{'
	//        'type' type=[Component|EString]
	//        ('parameters' '(' parameters+=ParameterInstance ( "," parameters+=ParameterInstance)* ')' )?
	//    '}';
	public ComponentInstanceElements getComponentInstanceAccess() {
		return pComponentInstance;
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}
	
	//ParameterValue returns ParameterValue:
	//    ParameterValue_Impl | LinkRef;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}
	
	//ParameterType returns ParameterType:
	//    ParameterType_Impl | ParameterPoseType | ParameterStringType | ParameterLinkRefType;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    'Parameter'
	//    name=EString
	//    '{'
	//        'type' type=ParameterType
	//        ('value' value=ParameterValue)?
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterValue_Impl returns ParameterValue:
	//    {ParameterValue}
	//    'ParameterValue'
	//    '{'
	//        ('value' value=EString)?
	//    '}';
	public ParameterValue_ImplElements getParameterValue_ImplAccess() {
		return pParameterValue_Impl;
	}
	
	public ParserRule getParameterValue_ImplRule() {
		return getParameterValue_ImplAccess().getRule();
	}
	
	//ParameterType_Impl returns ParameterType:
	//    {ParameterType}
	//    'ParameterType'
	//    ;
	public ParameterType_ImplElements getParameterType_ImplAccess() {
		return pParameterType_Impl;
	}
	
	public ParserRule getParameterType_ImplRule() {
		return getParameterType_ImplAccess().getRule();
	}
	
	//LinkRef returns LinkRef:
	//    {LinkRef}
	//    'LinkRef'
	//    '{'
	//        ('value' value=EString)?
	//        ('ref' ref=[kinematics::Link|EString])?
	//    '}';
	public LinkRefElements getLinkRefAccess() {
		return pLinkRef;
	}
	
	public ParserRule getLinkRefRule() {
		return getLinkRefAccess().getRule();
	}
	
	//ParameterPoseType returns ParameterPoseType:
	//    {ParameterPoseType}
	//    'ParameterPoseType'
	//    ;
	public ParameterPoseTypeElements getParameterPoseTypeAccess() {
		return pParameterPoseType;
	}
	
	public ParserRule getParameterPoseTypeRule() {
		return getParameterPoseTypeAccess().getRule();
	}
	
	//ParameterStringType returns ParameterStringType:
	//    {ParameterStringType}
	//    'ParameterStringType'
	//    ;
	public ParameterStringTypeElements getParameterStringTypeAccess() {
		return pParameterStringType;
	}
	
	public ParserRule getParameterStringTypeRule() {
		return getParameterStringTypeAccess().getRule();
	}
	
	//ParameterLinkRefType returns ParameterLinkRefType:
	//    {ParameterLinkRefType}
	//    'ParameterLinkRefType'
	//    ;
	public ParameterLinkRefTypeElements getParameterLinkRefTypeAccess() {
		return pParameterLinkRefType;
	}
	
	public ParserRule getParameterLinkRefTypeRule() {
		return getParameterLinkRefTypeAccess().getRule();
	}
	
	//ParameterInstance returns ParameterInstance:
	//    'ParameterInstance'
	//    '{'
	//        'parameter' parameter=[Parameter|EString]
	//        'value' value=ParameterValue
	//    '}';
	public ParameterInstanceElements getParameterInstanceAccess() {
		return pParameterInstance;
	}
	
	public ParserRule getParameterInstanceRule() {
		return getParameterInstanceAccess().getRule();
	}
	
	//Joint returns Joint:
	//    'Joint'
	//    name=EString
	//    '{'
	//        'type' type=JointType
	//        'parent' parent=[Link|EString]
	//        ('child' child=[Link|EString])?
	//        'origin' origin=Pose
	//        ('limit' limit=Limit)?
	//        ('axis' axis=Axis)?
	//    '}';
	public KinematicsGrammarAccess.JointElements getJointAccess() {
		return gaKinematics.getJointAccess();
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Link returns Link:
	//    {Link}
	//    'Link'
	//    name=EString;
	public KinematicsGrammarAccess.LinkElements getLinkAccess() {
		return gaKinematics.getLinkAccess();
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Pose returns Pose:
	//    'Pose'
	//    '{'
	//        'x' x=EDouble
	//        'y' y=EDouble
	//        'z' z=EDouble
	//        'roll' roll=EDouble
	//        'pitch' pitch=EDouble
	//        'yaw' yaw=EDouble
	//    '}';
	public KinematicsGrammarAccess.PoseElements getPoseAccess() {
		return gaKinematics.getPoseAccess();
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//enum JointType returns JointType:
	//                fixed = 'fixed' | prismatic = 'prismatic' | revolute = 'revolute';
	public KinematicsGrammarAccess.JointTypeElements getJointTypeAccess() {
		return gaKinematics.getJointTypeAccess();
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//Limit returns Limit:
	//    'Limit'
	//    '{'
	//        'effort' effort=EDouble
	//        'velocity' velocity=EDouble
	//        ('lower' lower=EDouble)?
	//        ('upper' upper=EDouble)?
	//    '}';
	public KinematicsGrammarAccess.LimitElements getLimitAccess() {
		return gaKinematics.getLimitAccess();
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Axis returns Axis:
	//    'Axis'
	//    '{'
	//        'x' x=EDouble
	//        'y' y=EDouble
	//        'z' z=EDouble
	//    '}';
	public KinematicsGrammarAccess.AxisElements getAxisAccess() {
		return gaKinematics.getAxisAccess();
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//AnyURI returns type::AnyURI:
	//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	public KinematicsGrammarAccess.AnyURIElements getAnyURIAccess() {
		return gaKinematics.getAnyURIAccess();
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public KinematicsGrammarAccess.EStringElements getEStringAccess() {
		return gaKinematics.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return gaKinematics.getDIGITRule();
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return gaKinematics.getBOOLEANRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return gaKinematics.getDOUBLERule();
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return gaKinematics.getDECINTRule();
	}
	
	//EDouble returns type::Double:
	//    DOUBLE;
	public KinematicsGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaKinematics.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public KinematicsGrammarAccess.Integer0Elements getInteger0Access() {
		return gaKinematics.getInteger0Access();
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
