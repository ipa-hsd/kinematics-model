/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.composition.serializer;

import com.google.inject.Inject;
import composition.Component;
import composition.ComponentInstance;
import composition.CompositionPackage;
import composition.LinkRef;
import composition.ParameterInstance;
import composition.ParameterLinkRefType;
import composition.ParameterPoseType;
import composition.ParameterStringType;
import composition.ParameterType;
import composition.ParameterValue;
import de.fraunhofer.ipa.composition.services.CompositionGrammarAccess;
import de.fraunhofer.ipa.kinematics.serializer.KinematicsSemanticSequencer;
import java.util.Set;
import kinematics.Axis;
import kinematics.Joint;
import kinematics.KinematicsPackage;
import kinematics.Limit;
import kinematics.Link;
import kinematics.Pose;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CompositionSemanticSequencer extends KinematicsSemanticSequencer {

	@Inject
	private CompositionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CompositionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CompositionPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case CompositionPackage.COMPONENT_INSTANCE:
				sequence_ComponentInstance(context, (ComponentInstance) semanticObject); 
				return; 
			case CompositionPackage.LINK_REF:
				sequence_LinkRef(context, (LinkRef) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER:
				sequence_Parameter(context, (composition.Parameter) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_INSTANCE:
				sequence_ParameterInstance(context, (ParameterInstance) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_LINK_REF_TYPE:
				sequence_ParameterLinkRefType(context, (ParameterLinkRefType) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_POSE_TYPE:
				sequence_ParameterPoseType(context, (ParameterPoseType) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_STRING_TYPE:
				sequence_ParameterStringType(context, (ParameterStringType) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_TYPE:
				sequence_ParameterType_Impl(context, (ParameterType) semanticObject); 
				return; 
			case CompositionPackage.PARAMETER_VALUE:
				sequence_ParameterValue_Impl(context, (ParameterValue) semanticObject); 
				return; 
			}
		else if (epackage == KinematicsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KinematicsPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case KinematicsPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case KinematicsPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case KinematicsPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case KinematicsPackage.POSE:
				sequence_Pose(context, (Pose) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentInstance returns ComponentInstance
	 *
	 * Constraint:
	 *     (type=[Component|EString] (parameters+=ParameterInstance parameters+=ParameterInstance*)?)
	 * </pre>
	 */
	protected void sequence_ComponentInstance(ISerializationContext context, ComponentInstance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (links+=Link links+=Link*)? 
	 *         (joints+=Joint joints+=Joint*)? 
	 *         (components+=ComponentInstance components+=ComponentInstance*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterValue returns LinkRef
	 *     LinkRef returns LinkRef
	 *
	 * Constraint:
	 *     (value=EString? ref=[Link|EString]?)
	 * </pre>
	 */
	protected void sequence_LinkRef(ISerializationContext context, LinkRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterInstance returns ParameterInstance
	 *
	 * Constraint:
	 *     (parameter=[Parameter|EString] value=ParameterValue)
	 * </pre>
	 */
	protected void sequence_ParameterInstance(ISerializationContext context, ParameterInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CompositionPackage.Literals.PARAMETER_INSTANCE__PARAMETER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CompositionPackage.Literals.PARAMETER_INSTANCE__PARAMETER));
			if (transientValues.isValueTransient(semanticObject, CompositionPackage.Literals.PARAMETER_INSTANCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CompositionPackage.Literals.PARAMETER_INSTANCE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterInstanceAccess().getParameterParameterEStringParserRuleCall_3_0_1(), semanticObject.eGet(CompositionPackage.Literals.PARAMETER_INSTANCE__PARAMETER, false));
		feeder.accept(grammarAccess.getParameterInstanceAccess().getValueParameterValueParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterType returns ParameterLinkRefType
	 *     ParameterLinkRefType returns ParameterLinkRefType
	 *
	 * Constraint:
	 *     {ParameterLinkRefType}
	 * </pre>
	 */
	protected void sequence_ParameterLinkRefType(ISerializationContext context, ParameterLinkRefType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterType returns ParameterPoseType
	 *     ParameterPoseType returns ParameterPoseType
	 *
	 * Constraint:
	 *     {ParameterPoseType}
	 * </pre>
	 */
	protected void sequence_ParameterPoseType(ISerializationContext context, ParameterPoseType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterType returns ParameterStringType
	 *     ParameterStringType returns ParameterStringType
	 *
	 * Constraint:
	 *     {ParameterStringType}
	 * </pre>
	 */
	protected void sequence_ParameterStringType(ISerializationContext context, ParameterStringType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterType returns ParameterType
	 *     ParameterType_Impl returns ParameterType
	 *
	 * Constraint:
	 *     {ParameterType}
	 * </pre>
	 */
	protected void sequence_ParameterType_Impl(ISerializationContext context, ParameterType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterValue returns ParameterValue
	 *     ParameterValue_Impl returns ParameterValue
	 *
	 * Constraint:
	 *     value=EString?
	 * </pre>
	 */
	protected void sequence_ParameterValue_Impl(ISerializationContext context, ParameterValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=ParameterType value=ParameterValue?)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, composition.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
