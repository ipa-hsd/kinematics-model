// automatically generated by Xtext
grammar de.fraunhofer.ipa.geometry.Geometry with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/geometry" 
import "http://www.ipa.fraunhofer.de/xacro" as xacro
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

LinkGeometry returns LinkGeometry:
	'LinkGeometry'
	'{'
		'ref' ref=[xacro::Link|EString]
		('visual' visual=Visual)?
		('collision' collision=Collision)?
	'}';

Visual returns Visual:
	{Visual}
	'Visual'
	'{'
		('origin' origin=Pose)?
		('geometry' geometry=Geometry)?
	'}';

Collision returns Collision:
	{Collision}
	'Collision'
	'{'
		('origin' origin=Pose)?
		('geometry' geometry=Geometry)?
	'}';

Pose returns xacro::Pose:
	'Pose'
	'{'
		('value' value=String0)?
		'rpy' rpy=String0
		'xyz' xyz=String0
	'}';

Geometry returns Geometry:
	{Geometry}
	'Geometry'
	'{'
		('box' box=Box)?
		('cylinder' cylinder=Cylinder)?
		('mesh' mesh=Mesh)?
		('sphere' sphere=Sphere)?
	'}';

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Box returns Box:
	'Box'
	'{'
		'x' x=Double0
		'y' y=Double0
		'z' z=Double0
	'}';

Cylinder returns Cylinder:
	'Cylinder'
	'{'
		'length' length=Double0
		'radius' radius=Double0
	'}';

Mesh returns Mesh:
	'Mesh'
	'{'
		'filename' filename=String0
		('scale' scale=Double0)?
	'}';

Sphere returns Sphere:
	'Sphere'
	'{'
		'radius' radius=Double0
	'}';
	
EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;
