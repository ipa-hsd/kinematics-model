/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.geometry.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.geometry.services.GeometryGrammarAccess;
import geometry.Box;
import geometry.Collision;
import geometry.Cylinder;
import geometry.Geometry;
import geometry.GeometryPackage;
import geometry.LinkGeometry;
import geometry.Mesh;
import geometry.Sphere;
import geometry.Visual;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xacro.Pose;
import xacro.XacroPackage;

@SuppressWarnings("all")
public class GeometrySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GeometryGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GeometryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GeometryPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case GeometryPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case GeometryPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case GeometryPackage.GEOMETRY:
				sequence_Geometry(context, (Geometry) semanticObject); 
				return; 
			case GeometryPackage.LINK_GEOMETRY:
				sequence_LinkGeometry(context, (LinkGeometry) semanticObject); 
				return; 
			case GeometryPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case GeometryPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case GeometryPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		else if (epackage == XacroPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XacroPackage.POSE:
				sequence_Pose(context, (Pose) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Box returns Box
	 *
	 * Constraint:
	 *     (x=Double0 y=Double0 z=Double0)
	 * </pre>
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.BOX__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.BOX__X));
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.BOX__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.BOX__Y));
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.BOX__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.BOX__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoxAccess().getXDouble0ParserRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getBoxAccess().getYDouble0ParserRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getBoxAccess().getZDouble0ParserRuleCall_7_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (origin=Pose? geometry=Geometry?)
	 * </pre>
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     (length=Double0 radius=Double0)
	 * </pre>
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.CYLINDER__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.CYLINDER__LENGTH));
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.CYLINDER__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.CYLINDER__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCylinderAccess().getLengthDouble0ParserRuleCall_3_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getCylinderAccess().getRadiusDouble0ParserRuleCall_5_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Geometry returns Geometry
	 *
	 * Constraint:
	 *     (box=Box? cylinder=Cylinder? mesh=Mesh? sphere=Sphere?)
	 * </pre>
	 */
	protected void sequence_Geometry(ISerializationContext context, Geometry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LinkGeometry returns LinkGeometry
	 *
	 * Constraint:
	 *     (ref=[Link|EString] visual=Visual? collision=Collision?)
	 * </pre>
	 */
	protected void sequence_LinkGeometry(ISerializationContext context, LinkGeometry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     (filename=String0 scale=Double0?)
	 * </pre>
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pose returns Pose
	 *
	 * Constraint:
	 *     (value=String0? rpy=String0 xyz=String0)
	 * </pre>
	 */
	protected void sequence_Pose(ISerializationContext context, Pose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     radius=Double0
	 * </pre>
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GeometryPackage.Literals.SPHERE__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GeometryPackage.Literals.SPHERE__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSphereAccess().getRadiusDouble0ParserRuleCall_3_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (origin=Pose? geometry=Geometry?)
	 * </pre>
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
