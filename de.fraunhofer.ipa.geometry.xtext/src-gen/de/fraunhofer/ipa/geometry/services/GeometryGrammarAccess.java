/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.geometry.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GeometryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LinkGeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.LinkGeometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkGeometryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefLinkCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefLinkEStringParserRuleCall_3_0_1 = (RuleCall)cRefLinkCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVisualKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVisualAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_4_1_0 = (RuleCall)cVisualAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCollisionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCollisionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCollisionCollisionParserRuleCall_5_1_0 = (RuleCall)cCollisionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LinkGeometry returns LinkGeometry:
		//    'LinkGeometry'
		//    '{'
		//        'ref' ref=[xacro::Link|EString]
		//        ('visual' visual=Visual)?
		//        ('collision' collision=Collision)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LinkGeometry'
		//'{'
		//    'ref' ref=[xacro::Link|EString]
		//    ('visual' visual=Visual)?
		//    ('collision' collision=Collision)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'LinkGeometry'
		public Keyword getLinkGeometryKeyword_0() { return cLinkGeometryKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'ref'
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }
		
		//ref=[xacro::Link|EString]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//[xacro::Link|EString]
		public CrossReference getRefLinkCrossReference_3_0() { return cRefLinkCrossReference_3_0; }
		
		//EString
		public RuleCall getRefLinkEStringParserRuleCall_3_0_1() { return cRefLinkEStringParserRuleCall_3_0_1; }
		
		//('visual' visual=Visual)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'visual'
		public Keyword getVisualKeyword_4_0() { return cVisualKeyword_4_0; }
		
		//visual=Visual
		public Assignment getVisualAssignment_4_1() { return cVisualAssignment_4_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_4_1_0() { return cVisualVisualParserRuleCall_4_1_0; }
		
		//('collision' collision=Collision)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'collision'
		public Keyword getCollisionKeyword_5_0() { return cCollisionKeyword_5_0; }
		
		//collision=Collision
		public Assignment getCollisionAssignment_5_1() { return cCollisionAssignment_5_1; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_5_1_0() { return cCollisionCollisionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOriginKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOriginAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_3_1_0 = (RuleCall)cOriginAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGeometryKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGeometryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGeometryGeometryParserRuleCall_4_1_0 = (RuleCall)cGeometryAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Visual returns Visual:
		//    {Visual}
		//    'Visual'
		//    '{'
		//        ('origin' origin=Pose)?
		//        ('geometry' geometry=Geometry)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Visual}
		//'Visual'
		//'{'
		//    ('origin' origin=Pose)?
		//    ('geometry' geometry=Geometry)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Visual}
		public Action getVisualAction_0() { return cVisualAction_0; }
		
		//'Visual'
		public Keyword getVisualKeyword_1() { return cVisualKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('origin' origin=Pose)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'origin'
		public Keyword getOriginKeyword_3_0() { return cOriginKeyword_3_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_3_1() { return cOriginAssignment_3_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_3_1_0() { return cOriginPoseParserRuleCall_3_1_0; }
		
		//('geometry' geometry=Geometry)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'geometry'
		public Keyword getGeometryKeyword_4_0() { return cGeometryKeyword_4_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4_1() { return cGeometryAssignment_4_1; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_1_0() { return cGeometryGeometryParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollisionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCollisionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOriginKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOriginAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_3_1_0 = (RuleCall)cOriginAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGeometryKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGeometryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGeometryGeometryParserRuleCall_4_1_0 = (RuleCall)cGeometryAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Collision returns Collision:
		//    {Collision}
		//    'Collision'
		//    '{'
		//        ('origin' origin=Pose)?
		//        ('geometry' geometry=Geometry)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Collision}
		//'Collision'
		//'{'
		//    ('origin' origin=Pose)?
		//    ('geometry' geometry=Geometry)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Collision}
		public Action getCollisionAction_0() { return cCollisionAction_0; }
		
		//'Collision'
		public Keyword getCollisionKeyword_1() { return cCollisionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('origin' origin=Pose)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'origin'
		public Keyword getOriginKeyword_3_0() { return cOriginKeyword_3_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_3_1() { return cOriginAssignment_3_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_3_1_0() { return cOriginPoseParserRuleCall_3_1_0; }
		
		//('geometry' geometry=Geometry)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'geometry'
		public Keyword getGeometryKeyword_4_0() { return cGeometryKeyword_4_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4_1() { return cGeometryAssignment_4_1; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_1_0() { return cGeometryGeometryParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Pose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPoseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueString0ParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRpyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRpyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRpyString0ParserRuleCall_4_0 = (RuleCall)cRpyAssignment_4.eContents().get(0);
		private final Keyword cXyzKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cXyzAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cXyzString0ParserRuleCall_6_0 = (RuleCall)cXyzAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Pose returns xacro::Pose:
		//    'Pose'
		//    '{'
		//        ('value' value=String0)?
		//        'rpy' rpy=String0
		//        'xyz' xyz=String0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Pose'
		//'{'
		//    ('value' value=String0)?
		//    'rpy' rpy=String0
		//    'xyz' xyz=String0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Pose'
		public Keyword getPoseKeyword_0() { return cPoseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('value' value=String0)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'value'
		public Keyword getValueKeyword_2_0() { return cValueKeyword_2_0; }
		
		//value=String0
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//String0
		public RuleCall getValueString0ParserRuleCall_2_1_0() { return cValueString0ParserRuleCall_2_1_0; }
		
		//'rpy'
		public Keyword getRpyKeyword_3() { return cRpyKeyword_3; }
		
		//rpy=String0
		public Assignment getRpyAssignment_4() { return cRpyAssignment_4; }
		
		//String0
		public RuleCall getRpyString0ParserRuleCall_4_0() { return cRpyString0ParserRuleCall_4_0; }
		
		//'xyz'
		public Keyword getXyzKeyword_5() { return cXyzKeyword_5; }
		
		//xyz=String0
		public Assignment getXyzAssignment_6() { return cXyzAssignment_6; }
		
		//String0
		public RuleCall getXyzString0ParserRuleCall_6_0() { return cXyzString0ParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Geometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGeometryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBoxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBoxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBoxBoxParserRuleCall_3_1_0 = (RuleCall)cBoxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCylinderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCylinderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCylinderCylinderParserRuleCall_4_1_0 = (RuleCall)cCylinderAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMeshKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMeshAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMeshMeshParserRuleCall_5_1_0 = (RuleCall)cMeshAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSphereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSphereAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSphereSphereParserRuleCall_6_1_0 = (RuleCall)cSphereAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Geometry returns Geometry:
		//    {Geometry}
		//    'Geometry'
		//    '{'
		//        ('box' box=Box)?
		//        ('cylinder' cylinder=Cylinder)?
		//        ('mesh' mesh=Mesh)?
		//        ('sphere' sphere=Sphere)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Geometry}
		//'Geometry'
		//'{'
		//    ('box' box=Box)?
		//    ('cylinder' cylinder=Cylinder)?
		//    ('mesh' mesh=Mesh)?
		//    ('sphere' sphere=Sphere)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_1() { return cGeometryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('box' box=Box)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'box'
		public Keyword getBoxKeyword_3_0() { return cBoxKeyword_3_0; }
		
		//box=Box
		public Assignment getBoxAssignment_3_1() { return cBoxAssignment_3_1; }
		
		//Box
		public RuleCall getBoxBoxParserRuleCall_3_1_0() { return cBoxBoxParserRuleCall_3_1_0; }
		
		//('cylinder' cylinder=Cylinder)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'cylinder'
		public Keyword getCylinderKeyword_4_0() { return cCylinderKeyword_4_0; }
		
		//cylinder=Cylinder
		public Assignment getCylinderAssignment_4_1() { return cCylinderAssignment_4_1; }
		
		//Cylinder
		public RuleCall getCylinderCylinderParserRuleCall_4_1_0() { return cCylinderCylinderParserRuleCall_4_1_0; }
		
		//('mesh' mesh=Mesh)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'mesh'
		public Keyword getMeshKeyword_5_0() { return cMeshKeyword_5_0; }
		
		//mesh=Mesh
		public Assignment getMeshAssignment_5_1() { return cMeshAssignment_5_1; }
		
		//Mesh
		public RuleCall getMeshMeshParserRuleCall_5_1_0() { return cMeshMeshParserRuleCall_5_1_0; }
		
		//('sphere' sphere=Sphere)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'sphere'
		public Keyword getSphereKeyword_6_0() { return cSphereKeyword_6_0; }
		
		//sphere=Sphere
		public Assignment getSphereAssignment_6_1() { return cSphereAssignment_6_1; }
		
		//Sphere
		public RuleCall getSphereSphereParserRuleCall_6_1_0() { return cSphereSphereParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//String0 returns type::String:
		//    'String' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXDouble0ParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYDouble0ParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cZKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZDouble0ParserRuleCall_7_0 = (RuleCall)cZAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Box returns Box:
		//    'Box'
		//    '{'
		//        'x' x=Double0
		//        'y' y=Double0
		//        'z' z=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Box'
		//'{'
		//    'x' x=Double0
		//    'y' y=Double0
		//    'z' z=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Double0
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Double0
		public RuleCall getXDouble0ParserRuleCall_3_0() { return cXDouble0ParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Double0
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Double0
		public RuleCall getYDouble0ParserRuleCall_5_0() { return cYDouble0ParserRuleCall_5_0; }
		
		//'z'
		public Keyword getZKeyword_6() { return cZKeyword_6; }
		
		//z=Double0
		public Assignment getZAssignment_7() { return cZAssignment_7; }
		
		//Double0
		public RuleCall getZDouble0ParserRuleCall_7_0() { return cZDouble0ParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthDouble0ParserRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRadiusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRadiusAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRadiusDouble0ParserRuleCall_5_0 = (RuleCall)cRadiusAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cylinder returns Cylinder:
		//    'Cylinder'
		//    '{'
		//        'length' length=Double0
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder'
		//'{'
		//    'length' length=Double0
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//length=Double0
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//Double0
		public RuleCall getLengthDouble0ParserRuleCall_3_0() { return cLengthDouble0ParserRuleCall_3_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_4() { return cRadiusKeyword_4; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_5() { return cRadiusAssignment_5; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_5_0() { return cRadiusDouble0ParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFilenameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilenameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilenameString0ParserRuleCall_3_0 = (RuleCall)cFilenameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScaleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScaleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScaleDouble0ParserRuleCall_4_1_0 = (RuleCall)cScaleAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mesh returns Mesh:
		//    'Mesh'
		//    '{'
		//        'filename' filename=String0
		//        ('scale' scale=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh'
		//'{'
		//    'filename' filename=String0
		//    ('scale' scale=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'filename'
		public Keyword getFilenameKeyword_2() { return cFilenameKeyword_2; }
		
		//filename=String0
		public Assignment getFilenameAssignment_3() { return cFilenameAssignment_3; }
		
		//String0
		public RuleCall getFilenameString0ParserRuleCall_3_0() { return cFilenameString0ParserRuleCall_3_0; }
		
		//('scale' scale=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'scale'
		public Keyword getScaleKeyword_4_0() { return cScaleKeyword_4_0; }
		
		//scale=Double0
		public Assignment getScaleAssignment_4_1() { return cScaleAssignment_4_1; }
		
		//Double0
		public RuleCall getScaleDouble0ParserRuleCall_4_1_0() { return cScaleDouble0ParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusDouble0ParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sphere returns Sphere:
		//    'Sphere'
		//    '{'
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere'
		//'{'
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_3_0() { return cRadiusDouble0ParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class Double0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Double0");
		private final RuleCall cDOUBLETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Double0 returns type::Double:
		//    DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall() { return cDOUBLETerminalRuleCall; }
	}
	public class Integer0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.Integer0");
		private final RuleCall cDECINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer0 returns type::Int:
		//    DECINT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECINT
		public RuleCall getDECINTTerminalRuleCall() { return cDECINTTerminalRuleCall; }
	}
	
	
	private final LinkGeometryElements pLinkGeometry;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final PoseElements pPose;
	private final GeometryElements pGeometry;
	private final String0Elements pString0;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final EStringElements pEString;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECINT;
	private final TerminalRule tJOINTTYPE;
	private final Double0Elements pDouble0;
	private final Integer0Elements pInteger0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GeometryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLinkGeometry = new LinkGeometryElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pPose = new PoseElements();
		this.pGeometry = new GeometryElements();
		this.pString0 = new String0Elements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.pEString = new EStringElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.DIGIT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.DOUBLE");
		this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.DECINT");
		this.tJOINTTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.geometry.Geometry.JOINTTYPE");
		this.pDouble0 = new Double0Elements();
		this.pInteger0 = new Integer0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.geometry.Geometry".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LinkGeometry returns LinkGeometry:
	//    'LinkGeometry'
	//    '{'
	//        'ref' ref=[xacro::Link|EString]
	//        ('visual' visual=Visual)?
	//        ('collision' collision=Collision)?
	//    '}';
	public LinkGeometryElements getLinkGeometryAccess() {
		return pLinkGeometry;
	}
	
	public ParserRule getLinkGeometryRule() {
		return getLinkGeometryAccess().getRule();
	}
	
	//Visual returns Visual:
	//    {Visual}
	//    'Visual'
	//    '{'
	//        ('origin' origin=Pose)?
	//        ('geometry' geometry=Geometry)?
	//    '}';
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision returns Collision:
	//    {Collision}
	//    'Collision'
	//    '{'
	//        ('origin' origin=Pose)?
	//        ('geometry' geometry=Geometry)?
	//    '}';
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Pose returns xacro::Pose:
	//    'Pose'
	//    '{'
	//        ('value' value=String0)?
	//        'rpy' rpy=String0
	//        'xyz' xyz=String0
	//    '}';
	public PoseElements getPoseAccess() {
		return pPose;
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//Geometry returns Geometry:
	//    {Geometry}
	//    'Geometry'
	//    '{'
	//        ('box' box=Box)?
	//        ('cylinder' cylinder=Cylinder)?
	//        ('mesh' mesh=Mesh)?
	//        ('sphere' sphere=Sphere)?
	//    '}';
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//String0 returns type::String:
	//    'String' /* TODO: implement this rule and an appropriate IValueConverter */;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//Box returns Box:
	//    'Box'
	//    '{'
	//        'x' x=Double0
	//        'y' y=Double0
	//        'z' z=Double0
	//    '}';
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder returns Cylinder:
	//    'Cylinder'
	//    '{'
	//        'length' length=Double0
	//        'radius' radius=Double0
	//    '}';
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Mesh returns Mesh:
	//    'Mesh'
	//    '{'
	//        'filename' filename=String0
	//        ('scale' scale=Double0)?
	//    '}';
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere returns Sphere:
	//    'Sphere'
	//    '{'
	//        'radius' radius=Double0
	//    '}';
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return tDECINT;
	}
	
	//terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';
	public TerminalRule getJOINTTYPERule() {
		return tJOINTTYPE;
	}
	
	//Double0 returns type::Double:
	//    DOUBLE;
	public Double0Elements getDouble0Access() {
		return pDouble0;
	}
	
	public ParserRule getDouble0Rule() {
		return getDouble0Access().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public Integer0Elements getInteger0Access() {
		return pInteger0;
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
