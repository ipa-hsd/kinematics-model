/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.geometry.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.fraunhofer.ipa.geometry.ide.contentassist.antlr.internal.InternalGeometryParser;
import de.fraunhofer.ipa.geometry.services.GeometryGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GeometryParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GeometryGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GeometryGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLinkGeometryAccess().getGroup(), "rule__LinkGeometry__Group__0");
			builder.put(grammarAccess.getLinkGeometryAccess().getGroup_4(), "rule__LinkGeometry__Group_4__0");
			builder.put(grammarAccess.getLinkGeometryAccess().getGroup_5(), "rule__LinkGeometry__Group_5__0");
			builder.put(grammarAccess.getVisualAccess().getGroup(), "rule__Visual__Group__0");
			builder.put(grammarAccess.getVisualAccess().getGroup_3(), "rule__Visual__Group_3__0");
			builder.put(grammarAccess.getVisualAccess().getGroup_4(), "rule__Visual__Group_4__0");
			builder.put(grammarAccess.getCollisionAccess().getGroup(), "rule__Collision__Group__0");
			builder.put(grammarAccess.getCollisionAccess().getGroup_3(), "rule__Collision__Group_3__0");
			builder.put(grammarAccess.getCollisionAccess().getGroup_4(), "rule__Collision__Group_4__0");
			builder.put(grammarAccess.getPoseAccess().getGroup(), "rule__Pose__Group__0");
			builder.put(grammarAccess.getPoseAccess().getGroup_2(), "rule__Pose__Group_2__0");
			builder.put(grammarAccess.getGeometryAccess().getGroup(), "rule__Geometry__Group__0");
			builder.put(grammarAccess.getGeometryAccess().getGroup_3(), "rule__Geometry__Group_3__0");
			builder.put(grammarAccess.getGeometryAccess().getGroup_4(), "rule__Geometry__Group_4__0");
			builder.put(grammarAccess.getGeometryAccess().getGroup_5(), "rule__Geometry__Group_5__0");
			builder.put(grammarAccess.getGeometryAccess().getGroup_6(), "rule__Geometry__Group_6__0");
			builder.put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
			builder.put(grammarAccess.getCylinderAccess().getGroup(), "rule__Cylinder__Group__0");
			builder.put(grammarAccess.getMeshAccess().getGroup(), "rule__Mesh__Group__0");
			builder.put(grammarAccess.getMeshAccess().getGroup_4(), "rule__Mesh__Group_4__0");
			builder.put(grammarAccess.getSphereAccess().getGroup(), "rule__Sphere__Group__0");
			builder.put(grammarAccess.getLinkGeometryAccess().getRefAssignment_3(), "rule__LinkGeometry__RefAssignment_3");
			builder.put(grammarAccess.getLinkGeometryAccess().getVisualAssignment_4_1(), "rule__LinkGeometry__VisualAssignment_4_1");
			builder.put(grammarAccess.getLinkGeometryAccess().getCollisionAssignment_5_1(), "rule__LinkGeometry__CollisionAssignment_5_1");
			builder.put(grammarAccess.getVisualAccess().getOriginAssignment_3_1(), "rule__Visual__OriginAssignment_3_1");
			builder.put(grammarAccess.getVisualAccess().getGeometryAssignment_4_1(), "rule__Visual__GeometryAssignment_4_1");
			builder.put(grammarAccess.getCollisionAccess().getOriginAssignment_3_1(), "rule__Collision__OriginAssignment_3_1");
			builder.put(grammarAccess.getCollisionAccess().getGeometryAssignment_4_1(), "rule__Collision__GeometryAssignment_4_1");
			builder.put(grammarAccess.getPoseAccess().getValueAssignment_2_1(), "rule__Pose__ValueAssignment_2_1");
			builder.put(grammarAccess.getPoseAccess().getRpyAssignment_4(), "rule__Pose__RpyAssignment_4");
			builder.put(grammarAccess.getPoseAccess().getXyzAssignment_6(), "rule__Pose__XyzAssignment_6");
			builder.put(grammarAccess.getGeometryAccess().getBoxAssignment_3_1(), "rule__Geometry__BoxAssignment_3_1");
			builder.put(grammarAccess.getGeometryAccess().getCylinderAssignment_4_1(), "rule__Geometry__CylinderAssignment_4_1");
			builder.put(grammarAccess.getGeometryAccess().getMeshAssignment_5_1(), "rule__Geometry__MeshAssignment_5_1");
			builder.put(grammarAccess.getGeometryAccess().getSphereAssignment_6_1(), "rule__Geometry__SphereAssignment_6_1");
			builder.put(grammarAccess.getBoxAccess().getXAssignment_3(), "rule__Box__XAssignment_3");
			builder.put(grammarAccess.getBoxAccess().getYAssignment_5(), "rule__Box__YAssignment_5");
			builder.put(grammarAccess.getBoxAccess().getZAssignment_7(), "rule__Box__ZAssignment_7");
			builder.put(grammarAccess.getCylinderAccess().getLengthAssignment_3(), "rule__Cylinder__LengthAssignment_3");
			builder.put(grammarAccess.getCylinderAccess().getRadiusAssignment_5(), "rule__Cylinder__RadiusAssignment_5");
			builder.put(grammarAccess.getMeshAccess().getFilenameAssignment_3(), "rule__Mesh__FilenameAssignment_3");
			builder.put(grammarAccess.getMeshAccess().getScaleAssignment_4_1(), "rule__Mesh__ScaleAssignment_4_1");
			builder.put(grammarAccess.getSphereAccess().getRadiusAssignment_3(), "rule__Sphere__RadiusAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GeometryGrammarAccess grammarAccess;

	@Override
	protected InternalGeometryParser createParser() {
		InternalGeometryParser result = new InternalGeometryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GeometryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GeometryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
